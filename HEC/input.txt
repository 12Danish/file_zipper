minHeap = ({character data} {huffman code for that character}) * minheapsize

{huffman code for that character} = 128 bits divided into 16 decimal numbers. Every number represents 8 bit binary number. eg: {127 - code.length()} * '0' + '1' (representing start bit) + code = 128 bits It is converted to 16 * 8-bit decimal numbers = 128 bits

{Encoded input File characters} {count0} = Entire file is converted into its huffman encoded form which is a binary code. This binary string is divided in 8-bit decimal numbers. If the final remaining bits are less than 8 bits, (8 - remainingBits) number of '0's are appended at the end. count0 is the number of '0's appended at the end.

The output file should be (.huf) file which represents it is a Huffman encoded file.
Decompressing the Compressed File:

->The compressed file is opened, and the number of unique characters and the total number of characters in the file are retrieved.
->The characters and their binary codes are then read from the file. We can recreate the Huffman tree using this.
->For each binary code: A left edge is created for 0, and a right edge is created for 1. Finally, a leaf node is formed and the character is stored within it. This is repeated for all characters and binary codes. The Huffman tree is thus recreated in this manner.
->The remaining file is now read bit by bit, and the corresponding 0/1 bit in the tree is traversed. The corresponding character is written into the decompressed file as soon as a leaf node is encountered in the tree.
->Step 4 is repeated until the compressed file has been read completely. In this manner, we recover all of the characters from our input file into a newly decompressed file with no data or quality loss.
Decompressing file decompress():

Following are the steps followed to decompress the Huffman encoded file.

1)getTree(): This function reads the Min Heap stored at the beginning of the file and reconstructs the Huffman tree by appending one Node at a time. MinHeapSize is the first value, next {MinHeapSize * (1+16)} contains character data and 16 decimal values representing 128 bits of binary Huffman code. Ignore the initial (127 - code.length()) of '0's and starting '1' bit and append the Node.

2)saveDecodedFile(): This function reads the entire {Encoded input File charachters} and {count0} by ignoring the first {MinHeapSize * (1 + 16)} of the file. The decimal values are converted to their binary equivalent(huffman codes) and the resulting character is appended to the output file by traversing the reconstructed huffman tree. The final count0 number of '0's are ignored since they were extra bits added while saving the encoded file.

03158029571